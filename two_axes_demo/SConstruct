import os, sys
sys.path.append(os.path.relpath("../bootloader/software/"))
import bootloadercmd as b


# Type the filename you want, e.g. blink
# Don't include the .c tag
file_to_run = 'two_axes'


def setup_PIC_env():
  env = Environment(PIC = '24FJ128GB206', 
                    CC = 'xc16-gcc', 
                    PROGSUFFIX = '.cof', 
                    CFLAGS = '-g -omf=coff -x c -mcpu=$PIC', 
                    LINKFLAGS = '-omf=coff -mcpu=$PIC -Wl,--script="app_p24FJ128GB206.gld"', 
                    CPPPATH = '../lib')
  
  # Change compiler path based on detected operating system
  if os.name == "nt":
    print("scons: Windows system detected")
    env.PrependENVPath('PATH', 'C:\\Program Files (x86)\\Microchip\\xc16\\v1.24\\bin')
  elif os.name == "posix":
    print("scons: Linux system detected")
    env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.24/bin')
    env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.22/bin')
  else:
    print("scons: OS not recognized - check the SConstruct file.")
    exit()

  bin2hex = Builder(action = 'xc16-bin2hex $SOURCE -omf=coff',
                    suffix = 'hex', 
                    src_suffix = 'cof')
  env.Append(BUILDERS = {'Hex' : bin2hex})
  build_list = Builder(action = 'xc16-objdump -S -D $SOURCE > $TARGET -omf=coff',
                 suffix = 'lst', 
                 src_suffix = 'cof')
  env.Append(BUILDERS = {'List' : build_list})
  return env

def load_function(target, source, env):
    bl = b.bootloadercmd()
    bl.import_hex(source[0].rstr())
    try:
      bl.write_device()
      bl.bootloader.start_user()
      bl.bootloader.close()
    except:
      print('FAILED to write to device. Is it plugged in?')
    return None

def append_builders(env):
  load = Builder(action=load_function,
                 suffix = 'none',
                 src_suffix = 'hex')

  env.Append(BUILDERS = {'load' : load})
  return env


########## Actually runs the scons code ##########
env = setup_PIC_env()
env.Program(file_to_run, [file_to_run+'.c',
                        '../lib/control_tools.c',
                        '../lib/i2c.c',
                        '../lib/oc.c',
                        '../lib/pin.c',
                        '../lib/spi.c',
                        '../lib/uart.c',
                        '../lib/ui.c',
                        '../lib/timer.c'])
# Left out imu.c, usb.c

print('Creating builder to load hex file via bootloader...')
append_builders(env)

env.Hex(file_to_run)
env.List(file_to_run)
env.load(file_to_run)
